static const unsigned int borderpx  = 1;
static const int user_bh = 27;
static const unsigned int snap      = 32;
static const unsigned int systraypinning = 0;
static const unsigned int systrayonleft = 0;
static const unsigned int systrayspacing = 2;
static const int systraypinningfailfirst = 1;
static const int showsystray        = 1;
static const int showbar            = 1;
static const int topbar             = 1;
static const int horizpadbar = 3; 
static const int vertpadbar = 10;
static const char *fonts[]          = { "JetBrainsMono:size=9:style=SemiBold" };
static const char dmenufont[]       = "JetBrainsMono:size=9:style=SemiBold";
static const char col_gray1[]       = "#161515";
static const char col_gray2[]       = "#c6c6c6";
static const char col_gray3[]       = "#1a1a1a";
static const char col_gray4[]       = "#6081a4";
static const char col_cyan[]        = "#6081a4";
static const char col_green[] = "#8fa176";
static const char col_blue[] = "#808fbe";
static const char col_back[] = "#121111";
static const char col_red[] = "#c15a5e";
static const char col_magenta[] = "#b183ba";
static const char col_yellow[] = "#d8b170";
static const char col_orange[] = "#eaac79";
static const unsigned int baralpha        = 100;
static const unsigned int borderalpha     = 100;
static const char *colors[][3] = {
	[SchemeNorm] = { col_gray2, col_gray3, col_gray1 },
	[SchemeSel]  = { col_gray4, col_gray3,  col_cyan  },
};

/* tagging */
static char *tags[] = {"cmd", "www", "dev", "chat", "sys", "med"};
static char *alttags[] = {"[cmd]",  "[www]", "[dev]",
                          "[chat]", "[sys]", "[med]"};

static const unsigned int ulinepad = 2; 
static const unsigned int ulinestroke = 2;
static const unsigned int ulinevoffset = 0;
static const int ulineall = 0; 

static const Rule rules[] = {
	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
	{ "chromium",  NULL,       NULL,       1 << 8,       0,           -1 },
};

static const char *const autostart[] = {
  "setxkbmap","latam", NULL,
  "dunst", NULL,
  "pipewire", NULL,
  "sh", "-c", "~/.config/dunst/scripts/low_bat_notifier.sh", NULL,
  "/usr/libexec/xfce-polkit", NULL,
  NULL /* terminate */
};


static const float mfact     = 0.50;
static const int nmaster     = 1;
static const int resizehints = 1;
static const int lockfullscreen = 1;

static const Layout layouts[] = {
	{ "[]=",      tile },
	{ "><>",      NULL },
	{ "[M]",      monocle },
};

#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

static char dmenumon[2] = "0";
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
static const char *termcmd[]  = { "alacritty", NULL };
static const char *termcmda[]  = {"st", NULL };
static const char *firefox[]  = { "firefox", NULL };
static const char *flameshot[] =   { "flameshot", "gui", NULL };
static const char *pcmanfm[] =   { "pcmanfm", NULL };
static const char *keepassxc[] =   { "keepassxc", NULL };
static const char *gpicview[] =   { "gpicview", NULL };

static const Key keys[] = {

	{ MODKEY|ShiftMask,             XK_d,      spawn,          {.v = dmenucmd } },
	{ MODKEY,             		XK_Return, spawn,          {.v =  termcmd} },
	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmda } },
	{ MODKEY|ShiftMask,             XK_b,      spawn,          {.v = firefox } },
	{ MODKEY|ShiftMask,             XK_f,      spawn,          {.v = flameshot } },
	{ MODKEY|ShiftMask,             XK_p,      spawn,          {.v = pcmanfm } },
	{ MODKEY|ShiftMask,             XK_k,      spawn,          {.v = keepassxc } },
	{ MODKEY|ShiftMask,             XK_g,      spawn,          {.v = gpicview} },

	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ Mod1Mask,                   	XK_Tab,    focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,             		XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,             		XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY|ControlMask,           XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_q,      killclient,     {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
  	{MODKEY|ControlMask|ShiftMask,  XK_q,      quit,          {0}}
};

static const Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

